"use strict";

const pkg = require("../package.json");
const { getCachedValue } = require("./cache");
const { formatTextWithElmFormat, getElmFormatVersion } = require("./util");

/*
 * Simply passing text to elm-format is not enough because of two problems:
 *
 * 1. If the code chunk only contains an import statement, no formatting takes place.
 * 2. `module Main exposing (.*)` is always added if no module has been defined,
 *    which is not wanted in markdown code blocks.
 *
 * Both problems are related to https://github.com/avh4/elm-format/issues/65.
 * Until this upstream issue is fixed, two custom patches are applied:
 *
 * 1. A dummy comment is added to the source and is then removed from the result.
 * 2. If elm-format's result defines a module, but the source does not
 *    and the current context is a markdown bloc, module definition is trimmed.
 *
 * Please submit an issue to https://github.com/gicentre/prettier-plugin-elm/issues
 * if there are any problems caused by the patches.
 */

const dummyComment = `\n{- DUMMY COMMENT BY PRETTIER-PLUGIN-ELM -}`;
const dummyCommentRemovalRegExp = /\n*\{- DUMMY COMMENT BY PRETTIER-PLUGIN-ELM -\}/;
const autogeneratedModuleDefinitionRegExp = /[ \t]*module\s+Main\s+exposing\s+\([^)\n]*\)\s*/;

function parse(text, parsers, opts) {
  const textToSend = `${text}${dummyComment}`;

  // extract formatted text from elm-format
  let formattedText = getCachedValue(formatTextWithElmFormat, [
    textToSend,
    pkg.version,
    getElmFormatVersion()
  ]);

  // patch 2
  if (
    opts.parentParser === "markdown" &&
    autogeneratedModuleDefinitionRegExp.test(formattedText) &&
    !autogeneratedModuleDefinitionRegExp.test(text)
  ) {
    formattedText = formattedText.replace(
      autogeneratedModuleDefinitionRegExp,
      ""
    );
    formattedText = formattedText.replace(/\n+$/, "\n");
  }
  formattedText = formattedText.replace(dummyCommentRemovalRegExp, "");
  if (formattedText === "\n") {
    formattedText = "";
  }

  // return an AST with a single node that contain all the formatted elm code;
  // no further splitting into smaller tokens is made
  return {
    ast_type: "elm-format",
    body: formattedText,
    end: text.length,
    source: text,
    start: 0
  };
}

module.exports = parse;
